#!/usr/bin/env python

import json
import requests
from pprint import pprint


human_app_id = "webgoat-ci"
human_stage_id = "build"

#Environment variables

uri="localhost"
port=str(8070)
username="admin"
password="admin123"
stage_id="build"

#Change these to suit your server
theurl="http://%s:%s/api/v2/applications/" % (uri,port)

#fetch report from uri
res= requests.get(theurl, auth=(username,password))
#Load result string to json
json_data = json.loads(res.text)
#iterate json


def get_json_report():
    #fetch report from uri
    res= requests.get(theurl, auth=(username,password))
    #Load result string to json
    json_data = json.loads(res.text)
    #iterate json
    for applications in json_data['applications']:
        app_name = str(applications['name'])
        app_id = str(applications['publicId'])
        app_id_hash = str(applications['id'])
        #gets url for app name
        if app_name == human_app_id:
            theurl2 = "http://%s:%s/api/v2/reports/applications/" % (uri,port) + str(app_id_hash)
            res2 = requests.get(theurl2, auth=(username,password))
            json_data_reps = json.loads(res2.text)
            #gets url for build stage of app / BOM
            for items in json_data_reps:
                stage = items['stage']
                reporturl = items['reportDataUrl']
                if stage == human_stage_id:
                    theurl3 = "http://%s:%s/" % (uri,port) + str(reporturl)
                    res3 = requests.get(theurl3, auth=(username,password))
                    json_data_comps = json.loads(res3.text)
    return json_data_comps


def get_security_reference(json_data_comps):
    reflist = []
    #pprint(json_data_comps)
    for comps in json_data_comps['components']:
        if (comps['componentIdentifier']['format']) == "maven":
            iq_group_id = comps['componentIdentifier']['coordinates']['groupId']
            #print(iq_group_id)
        if comps['componentIdentifier'] != None:
            #pprint(comps)


            for dict in (comps)['securityData']['securityIssues']:
                #print(comps['componentIdentifier']['coordinates'])

                    reference = (dict['reference'])

                    reflist.append(reference)

    return reflist, iq_group_id

def find_if_an_exploit_known(reference):
    stripped_source = reference[0:3]
    if stripped_source == "son":
        source = "sonatype"
    else:
        source = "cve"
    #print(stripped_source)
    theurl_vuln_info = "http://" + str(uri) + ":" + str(port) + "/rest/vulnerability/details/" + str(source) \
    + "/" + reference + "?" + \
    '&componentIdentifier=%7B%22format%22%3A%22maven%22%2C%22coordinates' \
    + '%22%3A%7B%22groupId%22%3A%22'+ str(iq_group_id)\
    + '%22%2C%22artifactId%22%3A%22' + "*" \
    + '%22%2C%22version%22%3A%22' + "*" \
    + '%22%2C%22extension%22%3A%22' + "*" \
    + '%22%2C%22classifier%22%3A%22' + "*" \
    + '%22%7D%7D'
    #print(theurl_vuln_info)

    # fetch report from uri
    res = requests.get(theurl_vuln_info, auth=(username, password))
    # Load result string to json
    json_data = json.loads(res.text)

    #pprint(json_data)
    attack = (json_data['htmlDetails'].find('<BR>Attack'))
    if attack > -1:
        known_exploit = True
        return known_exploit



if __name__ == "__main__":
    # print("This is a list of Vulnerbilities for the application " + str(human_app_id) + "indicating if a known" \
    #         " attack is available")
    # print("")
    json_report = get_json_report()

    pprint(json_report)

#     reflist, iq_group_id = get_security_reference(json_report)
#     for ref in reflist:

#         known_exploit = find_if_an_exploit_known(ref)
#         print(str(ref) + " - Known exploit?: " + str(known_exploit))
#         print("")
# print("End of job")
