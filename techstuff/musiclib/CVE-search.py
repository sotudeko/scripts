#!/usr/bin/env python
import sys
import json
import requests
# Command: CVE-search.py -s <URL> -a <user:pass> -t <stage> -f <output.csv> [-v] [-d]
# Parse command line
from optparse import OptionParser
parser = OptionParser()
parser.add_option('-v', '--verbose', action='store_true', default=False, dest='verbose',
                  help='Turn on verbose output')
parser.add_option('-d', '--debug', action='store_true', default=False, dest='debug',
                  help='Turn on debug')
parser.add_option('-s', '--server_url', action='store', type='string', default='http://localhost:8070', dest='server_url',
                  help='URL to the IQ Server. Default: http://localhost:8070', metavar='URL')
parser.add_option('-a', '--authentication', action='store', type='string', default='admin:admin123', dest='authentication',
                  help='Authentication credentials to use for the IQ Server', metavar='<user>:<pass>')
parser.add_option('-t', '--stage', action='store', type='string', default='build', dest='stage',
                  help='The stage to run analysis against. Accepted values: develop|build|stage-release|release|operate')
parser.add_option('-f', '--filename', action='store', type='string', default='CVE-search.csv', dest='filename',
                  help='Output filename', metavar='FILE')
(options, args) = parser.parse_args()
if options.debug:
  print >> sys.stderr, 'Debug:          True'
  if options.verbose:
    print >> sys.stderr, 'Verbose:        True'
  else:
    print >> sys.stderr, 'Verbose:        False'
  print >> sys.stderr, 'server_url:     ' + options.server_url
  print >> sys.stderr, 'authentication: ' + options.authentication
  print >> sys.stderr, 'stage:          ' + options.stage
  print >> sys.stderr, 'filename:       ' + options.filename
# Separate username:password
username,password = options.authentication.split(':')
if options.debug:
  print >> sys.stderr, 'username:       ' + username
  print >> sys.stderr, 'password:       ' + password
  print >> sys.stderr, ''
# Open output file and write the CSV header
file = open(options.filename,'w')
file.write('applicationName,applicationId,contactUserName,organizationName,organizationId,groupId,artifactId,extension,version,classifier,format,hash,matchState,relativePopularity,catalogDate,delaredLicenseId,declaredLiceseName,observedLicenseId,observedLicensename,reference,severity,source,threatCategory,url' + '\n')
# The main API query: do a wildcard search on all components and load as json
comp_search_url = options.server_url + '/api/v2/search/component?stageId=' + options.stage + '&componentIdentifier=%7B%22format%22%3A%22maven%22%2C%22coordinates%22%3A%7B%22groupId%22%3A%22*%22%7D%7D' 
comp_search_res = requests.get(comp_search_url, auth=(username,password))
if options.debug: print >> sys.stderr, 'comp_search_url:   ' + comp_search_url + ' -- (' + str(comp_search_res.status_code) + ')'
comp_search_json = json.loads(comp_search_res.text)
if options.debug:
  # print >> sys.stderr, json.dumps(comp_search_json, sort_keys=True, indent=2)
  print >> sys.stderr, ''
organizations_url = options.server_url + '/api/v2/organizations'
organizations_res = requests.get(organizations_url, auth=(username,password))
if options.debug: print >> sys.stderr, 'organizations_url:   ' + organizations_url + ' -- (' + str(organizations_res.status_code) + ')'
organizations_json = json.loads(organizations_res.text)
if options.debug:
  print >> sys.stderr, 'organizations_json:'
  print >> sys.stderr, json.dumps(organizations_json, sort_keys=True, indent=2)
  print >> sys.stderr, ''
prev_app_name = str()
# Loop on each component
for result in comp_search_json['results']:
  app_name = result['applicationName']
  app_id = result['applicationId']
  hash_id = result['hash']
  artifact_grp_id = result['componentIdentifier']['coordinates']['groupId']
  artifact_id = result['componentIdentifier']['coordinates']['artifactId']
  artifact_ver = result['componentIdentifier']['coordinates']['version']
  artifact_ext = result['componentIdentifier']['coordinates']['extension']
  # If it's a new app name, lookup new organization information
  if prev_app_name != app_name:
    # Get application organization information
    app_url = options.server_url + '/api/v2/applications?publicId=' + app_id
    app_res = requests.get(app_url, auth=(username,password))
    if options.debug: print >> sys.stderr, 'app_url:   ' + app_url + ' -- (' + str(app_res.status_code) + ')'
    app_json = json.loads(app_res.text)
    if options.debug:
      print >> sys.stderr, 'app_json:'
      print >> sys.stderr, json.dumps(app_json, sort_keys=True, indent=2)
      print >> sys.stderr, ''
    contactUserName = app_json['applications'][0]['contactUserName']
    app_organizationId = app_json['applications'][0]['organizationId']
    for org in organizations_json['organizations']:
      if org['id'] == app_organizationId:
        organizationName = org['name']
        organizationId = app_organizationId
    prev_app_name = app_name
  if options.verbose: print 'Processing: application: ' + app_name + '(' + app_id + ') - component: ' + artifact_grp_id + ', ' + artifact_id + ', ' + artifact_ver + ', ' + artifact_ext
  if options.debug:
    print >> sys.stderr, 'processing result:'
    print >> sys.stderr, json.dumps(result, sort_keys=True, indent=2)
    print >> sys.stderr, ''
  # Get component data
  headers = { "Content-Type":"application/json;charset=UTF-8" }
  data    = { "components":[ { "hash": hash_id, "componentIdentifier": { "format": "maven", "coordinates": { "groupId": artifact_grp_id, "artifactId": artifact_id, "version": artifact_ver, "extension": artifact_ext } } } ] }
  # if options.debug: print >> sys.stderr, json.dumps(data, sort_keys=True, indent=2)
  comp_detail_url = options.server_url + '/api/v2/components/details/'
  comp_detail_res = requests.post(comp_detail_url, json=data, auth=(username,password), headers=headers)
  if options.debug: print >> sys.stderr, 'comp_detail_url: ' + comp_detail_url + ' -- (' + str(comp_detail_res.status_code) + ')'
  comp_detail_json = json.loads(comp_detail_res.text)
  if options.debug:
    print >> sys.stderr, 'comp_detail_json:'
    print >> sys.stderr, json.dumps(comp_detail_json, sort_keys=True, indent=2)
    print >> sys.stderr, ''
  # componentDetails is an array, but should only have 1 entry in it.  Regardless - we loop on it.
  for details in comp_detail_json['componentDetails']:
    if options.debug:
      print >> sys.stderr, 'details'
      print >> sys.stderr, json.dumps(details, sort_keys=True, indent=2)
      print >> sys.stderr, ''
    # groupId, artifactId, extension, verison, classifier info - performance
    coordinates = details['component']['componentIdentifier']['coordinates']
    # build up component data string
    comp_info_str = app_name + ',' + \
          app_id + ',' + \
          str(contactUserName) + ',' + \
          organizationName + ',' + \
          organizationId + ',' + \
          coordinates['groupId'] + ',' + \
          coordinates['artifactId'] + ',' + \
          coordinates['extension'] + ',' + \
          coordinates['version'] + ',' + \
          coordinates['classifier'] + ',' + \
          details['component']['componentIdentifier']['format'] + ',' + \
          str(details['component']['hash']) + ',' + \
          details['matchState'] + ',' + \
          str(details['relativePopularity']) + ',' + \
          str(details['catalogDate']) + ','
    # Add delcared license data (if there is any)
    declaredLicenseId_str = ''
    declaredLicenseName_str = ''
    lic_sep = ''
    if details['licenseData']['declaredLicenses']:
      for license in details['licenseData']['declaredLicenses']:
        declaredLicenseId_str += lic_sep + license['licenseId']
        declaredLicenseName_str += lic_sep + license['licenseName']
        lic_sep = '|'
    comp_info_str += declaredLicenseId_str + ',' + declaredLicenseName_str + ','
    # Add observed license data (if there is any)
    observedLicenseId_str = ''
    observedLicenseName_str = ''
    lic_sep = ''
    if details['licenseData']['observedLicenses']:
      for license in details['licenseData']['observedLicenses']:
        observedLicenseId_str += lic_sep + license['licenseId']
        observedLicenseName_str += lic_sep + license['licenseName']
        lic_sep = '|'
    comp_info_str += observedLicenseId_str + ',' + observedLicenseName_str + ','
    # If the securityIssues is emtpy, then no vulnerabilities
    if not details['securityData']['securityIssues']:
      if options.verbose: print 'No vulnerabilities'
      file.write(comp_info_str + ',,,,' + '\n')
    else:
      # Now, process each vulnerability
      for issue in details['securityData']['securityIssues']:
        if options.verbose: print 'Vulnerability: ' + issue['reference']
        if options.debug:
          print >> sys.stderr, 'securityData'
          print >> sys.stderr, json.dumps(issue, sort_keys=True, indent=2)
          print >> sys.stderr, ''
        file.write(comp_info_str +
          issue['reference'] + ',' +
          str(issue['severity']) + ',' +
          issue['source'] + ',' +
          issue['threatCategory'] + ',' +
          str(issue['url']) +
          '\n')
# All done - close up
file.close()
if options.verbose: print 'CVE search completed successfully. Output file is: ' + options.filename
